---
# This playbook customizes the ransomware VM

- name: Prep the ransomware VM
  hosts: servers
  gather_facts: true
  become: false

  vars_files:
    - ../../credentials.yml  # vault protected passwords

  # Setting the `ansible_password` variable removes requirement to have public ssh keys
  # installed in the VM images via cloud-init.
  vars:
    ansible_python_interpreter: python3
    ansible_password: "{{ vault_ssh_password }}"
    docker_version_focal: "5:20.10.14~3-0~ubuntu-focal"
    docker_version_jammy: "5:20.10.16~3-0~ubuntu-jammy"
    user_home: "{{ lookup('env','HOME') }}"
    # run_fio when set to true will run the workload generator that mimics the data patterns that
    # will trigger the ransomware alerts in nebulon ON.
    run_fio: true

  tasks:

    - name: Check if APT periodic updates are enabled
      ansible.builtin.shell:
        grep 1 -m 1 /etc/apt/apt.conf.d/20auto-upgrades | awk -F '"' '{print $2}'
      changed_when: false
      register: apt_check_cmd

    - name: Set apt variable
      ansible.builtin.set_fact:
        apt_check: "{{ apt_check_cmd.stdout }}"

    - name: Disable APT periodic updates
      when: apt_check == "1"
      block:
        - name: Set all periodic update options to 0
          ansible.builtin.replace:
            path: /etc/apt/apt.conf.d/10periodic
            regexp: "1"
            replace: "0"
            mode: '0755'
        - name: Set all auto update options to 0
          ansible.builtin.replace:
            path: /etc/apt/apt.conf.d/20auto-upgrades
            regexp: "1"
            replace: "0"
        - name: Disable unattended upgrades
          ansible.builtin.lineinfile:
            path: /etc/apt/apt.conf.d/10periodic
            regexp: "^APT::Periodic::Unattended-Upgrade"
            line: 'APT::Periodic::Unattended-Upgrade "0";'
            create: true
            mode: '0755'
        - name: Stop apt-daily.* systemd services
          ansible.builtin.service:
            name: "{{ item }}"
            state: stopped
          with_items:
            - unattended-upgrades
            - apt-daily
            - apt-daily.timer
            - apt-daily-upgrade
            - apt-daily-upgrade.timer
        - name: Disable apt-daily.* systemd services
          ansible.builtin.systemd:
            name: "{{ service }}"
            enabled: false
            masked: true
          with_items:
            - apt-daily.service
            - apt-daily.timer
            - apt-daily-upgrade.service
            - apt-daily-upgrade.timer
          loop_control:
            loop_var: service


    # Install some packages required
    - name: Install prerequisite packages
      tags: apt
      block:
        - name: Remove CDROM apt source if it exists
          ansible.builtin.lineinfile:
            path: /etc/apt/sources.list
            search_string: 'deb [check-date=no] file:///cdrom focal main restricted'
            line: "# Removed CDROM source"
        - name: Update apt and install packages
          ansible.builtin.apt:
            name:
              - python3-testresources
              - lsscsi
            state: present
            update_cache: true
            cache_valid_time: 3600

    # Use these facts to get the DNS search domain for the next two tasks
    - name: Gather facts from VMs
      ansible.builtin.setup:
        gather_subset:
          - 'network'

    # Get the grow_ubuntu_root_vm.sh script
    - name: Get grow_ubuntu_root_vm.sh script (demopods)
      ansible.builtin.get_url:
        url: http://linuxcommon/cloud-init/scripts/grow_ubuntu_root_vm.sh
        dest: ~/
        mode: '0755'
      tags: get_script
      when: ansible_facts.dns.search[0] != 'tme.nebulon.com'

    # Get the grow_ubuntu_root_vm.sh script
    - name: Get grow_ubuntu_root_vm.sh script (TME)
      ansible.builtin.get_url:
        url: http://homes.sc0.nebulon.com/aaron/cloud-init/scripts/grow_ubuntu_root_vm.sh
        dest: ~/
        mode: '0755'
      tags: get_script
      when: ansible_facts.dns.search[0] == 'tme.nebulon.com'

    # Execute the script to grow the root volume
    - name: Execute grow_ubuntu_root_vm.sh script
      ansible.builtin.command:
        ~/grow_ubuntu_root_vm.sh
      register: script_output
      tags: get_script
      changed_when: "'CHANGED:' in script_output.stdout"

    - name: Add Authorized keys from ansible-vault
      ansible.posix.authorized_key:
        user: root
        state: present
        key: "{{ item }}"
      loop: "{{ vault_pubkeys }}"
      loop_control:
        label: "Added SSH key to {{ inventory_hostname }}"
      tags: ssh

    # Docker install and configuration
    - name: Install prerequisite packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
          - lsscsi
          - python3-pip
        state: present
        update_cache: true
        cache_valid_time: 3600
      tags: apt

    - name: Install Docker SDK for Python
      ansible.builtin.pip:
        name: docker
      tags: docker_install

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      register: apt_result
      until: apt_result is success
      retries: 5
      delay: 5
      ignore_errors: true

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
        state: present

    - name: Determine Ubuntu Build
      ansible.builtin.command:
        grep -i codename -m 1 /etc/os-release
      register: ubuntu_version
      changed_when: false
      tags:
        - ubuntu_version
        - docker

    # Containerd configuration
    # Populate containerd.conf file
    - name: Populate /etc/modules-load.d/containerd.conf
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
          overlay
          br_netfilter
          EOF
        creates: /etc/modules-load.d/containerd.conf

    - name: Load br_netfilter module if not present
      community.general.modprobe:
        name: br_netfilter
        state: present

    - name: Load overlay module if not present
      community.general.modprobe:
        name: overlay
        state: present

    - name: Enable iptables to see briged traffic
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          EOF
        creates: /etc/sysctl.d/99-kubernetes-cri.conf

    - name: Reload sysctl to pick up iptables changes
      ansible.builtin.command: "sysctl --system"
      changed_when: false

    # Check to see if the docker.service.d file exists. If so
    # assume its set up correctly and skip restarting Docker since this
    # causes issues if re-running the playbook.
    - name: Check for existing systemd driver
      ansible.builtin.stat:
        path: /etc/systemd/system/docker.service.d
      register: docker_installed
      tags:
        - docker
        - docker_check
      changed_when: false

    - name: Install Docker CE (Ubuntu 20.x)
      ansible.builtin.apt:
        name:
          - docker-ce={{ docker_version_focal }}
          - docker-ce-cli={{ docker_version_focal }}
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: true
      when: "('focal' in ubuntu_version.stdout) and (not docker_installed.stat.exists)"
      tags: docker

    - name: Install Docker CE (Ubuntu 20.x)
      ansible.builtin.apt:
        name:
          - docker-ce={{ docker_version_jammy }}
          - docker-ce-cli={{ docker_version_jammy }}
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: true
      when: "('jammy' in ubuntu_version.stdout) and (not docker_installed.stat.exists)"
      tags: docker

    - name: Create a /etc/docker directory
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        mode: '0755'
      tags: docker

    - name: Configure Docker daemon cgroup driver (systemd)
      ansible.builtin.shell:
        cmd: |
          cat > /etc/docker/daemon.json <<EOF
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
          EOF
      tags: docker
      changed_when: true
      when: not docker_installed.stat.exists

    - name: Create systemd service file for Docker
      ansible.builtin.file:
        path: "/etc/systemd/system/docker.service.d"
        state: touch
        mode: '0755'
      tags: docker
      when: not docker_installed.stat.exists

    - name: Reload systemd daemons and restart Docker service
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: docker
      tags: docker
      when: not docker_installed.stat.exists

    - name: Disable SWAP in fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Turn off firewall
      community.general.ufw:
        state: disabled

    - name: Copy SSH public key
      ansible.builtin.copy:
        src: "{{ user_home }}/.ssh/id_rsa.pub"
        dest: "/{{ ansible_user_id }}/.ssh/id_rsa.pub"
        mode: '0644'

    - name: Copy SSH private key
      ansible.builtin.copy:
        src: "{{ user_home }}/.ssh/id_rsa"
        dest: "/{{ ansible_user_id }}/.ssh/id_rsa"
        mode: '0600'

    - name: Clone the ransomware repo
      ansible.builtin.git:
        repo: git@bitbucket.org:nebuloninc/ransomware_demo.git
        dest: "/{{ ansible_user_id }}/ransomware"
        recursive: true
        accept_newhostkey: true
        version: '919f1c9'

    - name: Create data directory
      ansible.builtin.file:
        path: "/{{ ansible_user_id }}/data"
        mode: '0755'
        state: directory
      tags: files
      register: dir_create

    - name: Copy data to VM (TME environment)
      ansible.builtin.unarchive:
        src: "http://homes.sc0.nebulon.com/aaron/ransomware_data.tar.gz"
        dest: "/{{ ansible_user_id }}/data"
        mode: '0755'
        remote_src: true
      tags: files
      register: files_result
      when:
        - dir_create.changed and
          ansible_facts.dns.search[0] == 'tme.nebulon.com'

    - name: Copy data to VM (demopod environment)
      ansible.builtin.unarchive:
        src: "http://linuxcommon/ransomware/ransomware_data.tar.gz"
        dest: "/{{ ansible_user_id }}/data"
        remote_src: true
        mode: '0755'
      tags: files
      register: files_result
      when:
        - dir_create.changed and
          ansible_facts.dns.search[0] != 'tme.nebulon.com'

    - name: Get directory contents
      ansible.builtin.shell:
        cmd: |
          ls ~/data
      register: ls_output
      changed_when: false
      tags:
        - files
        - duplicate_data

    - name: Create directory for copied data
      ansible.builtin.file:
        path: /{{ ansible_user_id }}/data/duplicate
        state: directory
        mode: '0755'

    - name: Duplicate copied data
      ansible.builtin.command:
        cmd: |
          cp -ur "/{{ ansible_user_id }}/data" "/{{ ansible_user_id }}/data/duplicate"
      register: cmd_output
      when: "'duplicate' not in ls_output.stdout"
      failed_when: cmd_output.rc > 2
      changed_when: true
      tags:
        - files
        - duplicate_data

    # This breaks with later versions of docker.
    # Fix python3 -m pip install requests==2.28.1
    - name: Build the FIO Docker image
      community.docker.docker_image:
        name: fio_runner
        build:
          path: "/{{ ansible_user_id }}/ransomware/FIO_JOB_LUNCHER"
        source: build
        tag: latest
      tags: docker_fio_build

    - name: Start the FIO container
      community.docker.docker_container:
        name: fio_runner
        image: fio_runner
        volumes:
          - "/{{ ansible_user_id }}/TMP/:/TMP"
      tags: docker_fio_run
      when: run_fio

    - name: Build the ransomware Docker image
      community.docker.docker_image:
        name: neb_ransomware
        build:
          path: "/{{ ansible_user_id }}/ransomware/RANSOMWARE_DOCKER"
        source: build
        tag: latest
      tags: docker_ransomware_build
