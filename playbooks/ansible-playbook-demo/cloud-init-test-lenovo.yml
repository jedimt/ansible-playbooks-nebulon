---
# Example invocation:
# ansible-playbook -i inventory/lenovo.yml playbooks/ansible-playbook-demo/cloud-init-test-lenovo.yml

- name: Test cloud-init
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    # Ansible vault with all required passwords
    - "../../credentials.yml"

  vars:
    npod_name: "cloud_init_{{ demopod }}"
    npod_template: "Ubuntu 22.04.4 NoLVM"
    npod_group: "Kubernetes"
    timezone: "US/Pacific"
    npod_note: "Created by Ansible playbook"
    npod_state: present

    spus:
      - spu_serial: 012386435A39449519
        cloud_init_user_data: |
            #cloud-config
            hostname: J100MY0A

            runcmd:
              - echo "Server successfully customized by Nebulon cloud-init workflow" > /var/test
              - date >> /var/test
        ip_info_config:
          - dhcp: false
            bond_mode: BondMode8023ad
            interfaces:
              - "enP8p1s0f0np0"
              - "enP8p1s0f1np1"
            address: "10.100.29.117"
            netmask_bits: 22
      - spu_serial: 01231C5BA68435FC19
        cloud_init_user_data: |
            #cloud-config
            hostname: J100KY4V

            runcmd:
              - echo "Server successfully customized by Nebulon cloud-init workflow" > /var/test
              - date >> /var/test
        ip_info_config:
          - dhcp: false
            bond_mode: BondMode8023ad
            interfaces:
              - "enP8p1s0f0np0"
              - "enP8p1s0f1np1"
            address: "10.100.29.118"
            netmask_bits: 22
      - spu_serial: 01234C1DDA95332EEE
        cloud_init_user_data: |
            #cloud-config
            hostname: J100KY4R

            runcmd:
              - echo "Server successfully customized by Nebulon cloud-init workflow" > /var/test
              - date >> /var/test
        ip_info_config:
          - dhcp: false
            bond_mode: BondMode8023ad
            interfaces:
              - "enP8p1s0f0np0"
              - "enP8p1s0f1np1"
            address: "10.100.29.119"
            netmask_bits: 22
      - spu_serial: 01236AE13059FD35EE
        cloud_init_user_data: |
            #cloud-config
            hostname: J100KY4T

            runcmd:
              - echo "Server successfully customized by Nebulon cloud-init workflow" > /var/test
              - date >> /var/test
        ip_info_config:
          - dhcp: false
            bond_mode: BondMode8023ad
            interfaces:
              - "enP8p1s0f0np0"
              - "enP8p1s0f1np1"
            address: "10.100.29.120"
            netmask_bits: 22

  tasks:
    - name: Get nPod group UUID
      nebulon.nebulon_on.neb_npod_group_info:
        neb_username: "{{ vault_neb_username }}"
        neb_password: "{{ vault_neb_password }}"
        name: "{{ npod_group }}"
      register: npod_group_name
      tags:
        - npod_group

    - name: Get nPod template UUID
      nebulon.nebulon_on.neb_npod_template_info:
        neb_username: "{{ vault_neb_username }}"
        neb_password: "{{ vault_neb_password }}"
        name: "{{ npod_template }}"
      register: npod_template_name
      tags:
        - npod_template

    - name: Set facts
      ansible.builtin.set_fact:
        npod_group_uuid: "{{ npod_group_name.npod_groups[0].uuid }}"
        npod_template_uuid: "{{ npod_template_name.npod_templates[-1].uuid }}"
      tags:
        - npod_template

    - name: Extract SPU serials
      ansible.builtin.set_fact:
        spu_serials: "{{ spus | map(attribute='spu_serial') | list }}"

    - name: Verify SPUs not part of any existing nPod
      nebulon.nebulon_on.neb_spu_info:
        neb_username: "{{ vault_neb_username }}"
        neb_password: "{{ vault_neb_password }}"
        spu_serials: "{{ spu_serials }}"
        not_in_npod: true
      register: npod_spus

    # Disable linting due to warning that cannot be bypassed
    - name: Create nPod # noqa: args[module]
      nebulon.nebulon_on.neb_npod:
        neb_username: "{{ vault_neb_username }}"
        neb_password: "{{ vault_neb_password }}"
        name: "{{ npod_name }}"
        npod_group_uuid: "{{ npod_group_uuid }}"
        spus: "{{ spus }}"
        npod_template_uuid: "{{ npod_template_uuid }}"
        note: "{{ npod_note }}"
        timezone: "{{ timezone }}"
        ignore_warnings: true
        state: "{{ npod_state }}"
      register: npod_data
      when: npod_spus.spus[0].serial is defined
